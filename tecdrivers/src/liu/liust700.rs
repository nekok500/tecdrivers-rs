use anyhow::Result;
use encoding_rs::SHIFT_JIS;
use std::time::Duration;

use rusb::{Context, DeviceHandle};

use crate::USBDevice;

use super::LIU;

static INIT_PACKETS: &[&[u8]] = &[
    &[0x1b, 0x5c, 0x3f, 0x4c, 0x53, 0x32], // \\?LS2
    &[0x1b, 0x52, 0x63],                   // \Rd
    &[0x1b, 0x5c, 0x3f, 0x4c, 0x44, 0x35], // \\?LD5
    &[0x1b, 0x5b, 0x32, 0x4a],             // \e[2J
    &[0x1b, 0x5b, 0x31, 0x3b, 0x31, 0x48], // \e[1;1H
    &[
        0x1b, 0x5b, 0x30, 0x6d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    ], // \e[0m
    &[0x1b, 0x5b, 0x32, 0x3b, 0x31, 0x48], // \e[2;1H
    &[
        0x1b, 0x5b, 0x30, 0x6d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    ], // \e[0m
    &[0x1b, 0x5b, 0x33, 0x3b, 0x31, 0x48], // \e[3;1H
    &[
        0x1b, 0x5b, 0x30, 0x6d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    ], // \e[0m
    &[0x1b, 0x5b, 0x32, 0x4a],             // \e[2J
    &[0x1b, 0x5b, 0x31, 0x3b, 0x31, 0x48], // \e[1;1H
    &[0x1b, 0x5c, 0x3f, 0x4c, 0x53, 0x35], // \\?LS5
    &[0x0d, 0x0a],                         // \r\n
];
static CLEAR_PACKETS: &[&[u8]] = &[
    &[0x1b, 0x5b, 0x32, 0x4a],             // \e[2J
    &[0x1b, 0x5b, 0x31, 0x3b, 0x31, 0x48], // \e[1;1H
    &[0x1b, 0x5c, 0x3f, 0x4c, 0x53, 0x35], // \\?LS5
];
static VID: u16 = 0x08a6;
static PID: u16 = 0x0017;
static TIMEOUT: Duration = Duration::from_secs(1);

pub struct LIUST700 {
    handle: DeviceHandle<Context>,
}

impl USBDevice for LIUST700 {
    fn find(list: &rusb::DeviceList<Context>, reset: bool) -> Result<Option<Box<Self>>> {
        let Some(device) = list.iter().find(|d| {
            // TODO: error handling
            let desc = d.device_descriptor().expect("failed to get descriptor");
            desc.vendor_id() == VID && desc.product_id() == PID
        }) else {
            return Ok(None);
        };

        Ok(Some(Self::init(device.open()?, reset)?))
    }
}

impl LIU for LIUST700 {
    fn init(handle: DeviceHandle<Context>, reset: bool) -> Result<Box<Self>> {
        if reset {
            handle.reset()?;
        }

        for b in INIT_PACKETS {
            handle.write_bulk(0x02, b, TIMEOUT)?;
        }

        Ok(Box::new(Self { handle }))
    }

    fn write(&self, text: &str) -> Result<()> {
        let (res, _, _) = SHIFT_JIS.encode(text);
        self.handle.write_bulk(0x02, &res, TIMEOUT)?;

        Ok(())
    }

    fn clear(&self) -> Result<()> {
        for b in CLEAR_PACKETS {
            self.handle.write_bulk(0x02, b, TIMEOUT)?;
        }

        Ok(())
    }
}
